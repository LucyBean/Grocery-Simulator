#BlueJ class context
comment0.params=c\ p
comment0.target=void\ setCollider(Collider,\ Point)
comment0.text=\r\n\ Position\ for\ collider\ relative\ to\ actor's\ centre.\r\n\ @param\ c\ Collider\ object\ to\ be\ attached.\r\n\ @param\ p\ Point\ of\ the\ Collider's\ centre\ relative\ to\ the\ CollidingActor's\ centre.\r\n
comment1.params=
comment1.target=Collider\ getCollider()
comment10.params=d\ amount
comment10.target=void\ move(Direction,\ int)
comment10.text=\r\n\ Uses\ precise\ collision\ checking\ if\ a\ Collider\ object\ is\ attached.\ The\ CollidingActor\r\n\ will\ be\ moved\ as\ far\ as\ possible\ in\ the\ given\ direction\ (up\ to\ amount)\ without\r\n\ overlapping\ with\ any\ other\ Collider\ objects.\r\n\ \r\n\ @param\ d\ The\ direction\ in\ which\ to\ move.\r\n\ @param\ amount\ The\ maximum\ amount\ that\ the\ CollidingActor\ will\ move.\r\n
comment11.params=x\ y
comment11.target=void\ setLocation(int,\ int)
comment11.text=\r\n\ Also\ causes\ the\ associated\ Collider\ to\ be\ moved.\r\n
comment12.params=target\ amount
comment12.target=void\ moveTowards(greenfoot.Actor,\ int)
comment12.text=\r\n\ Moves\ towards\ the\ specified\ Actor\ (as\ the\ crow\ flies)\ using\ precise\ collision\ checking.\r\n\ The\ CollidingActor\ may\ move\ too\ far\ or\ not\ far\ enough,\ due\ to\ storing\ the\ current\r\n\ position\ using\ integers.\r\n\ \r\n\ @param\ target\ The\ Actor\ to\ move\ towards.\r\n\ @param\ amount\ The\ maximum\ distance\ to\ move.\r\n
comment2.params=w
comment2.target=void\ addedToWorld(greenfoot.World)
comment2.text=\r\n\ Also\ causes\ the\ attached\ Collider\ (if\ any)\ to\ be\ removed\ as\ well\ as\ the\ CollidingActor.\r\n
comment3.params=d\ filter
comment3.target=greenfoot.Actor\ getOneObjectAtEdge(Direction,\ java.lang.Class)
comment3.text=\r\n\ Checks\ the\ row/column\ of\ pixels\ immediately\ adjacent\ to\ the\ CollidingActor\ in\ the\r\n\ specified\ direction\ for\ a\ Collider\ object,\ then\ returns\ the\ associated\ Actor.\ Pixels\r\n\ are\ checked\ top-to-bottom,\ left-to-right,\ with\ the\ first\ Actor's\ Collider\ found\ in\r\n\ this\ order\ returned.\r\n\ \r\n\ @param\ d\ Direction\ to\ check\ for\ a\ Collider\r\n\ @param\ filter\ Causes\ only\ objects\ of\ this\ class\ to\ be\ returned\r\n\ @return\ Returns\ an\ Actor\ object\ with\ an\ associated\ Collider\ in\ the\ immediately\ adjacent\ row/column\r\n
comment4.params=d\ cls
comment4.target=boolean\ isObjectAtEdge(Direction,\ java.lang.Class)
comment4.text=\r\n\ Detects\ whether\ there\ is\ a\ Collider\ object\ with\ an\ associated\ Actor\ of\ the\r\n\ specified\ class\ in\ the\ immediately\ adjacent\ row\ or\ column\ of\ pixels\ in\ the\r\n\ specified\ direction.\r\n\ \r\n\ @param\ d\ The\ direction\ in\ which\ to\ check.\r\n\ @param\ cls\ The\ class\ of\ the\ Collider's\ associated\ Actor\ to\ check\ for.\r\n
comment5.params=d
comment5.target=boolean\ isObjectAtEdge(Direction)
comment5.text=\r\n\ Detects\ whether\ there\ is\ a\ Collider\ object\ in\ the\ immediately\ adjacent\ row\ or\ column\r\n\ of\ pixels\ in\ the\ specified\ direction.\r\n
comment6.params=amount
comment6.target=void\ moveUp(int)
comment7.params=amount
comment7.target=void\ moveDown(int)
comment8.params=amount
comment8.target=void\ moveLeft(int)
comment9.params=amount
comment9.target=void\ moveRight(int)
numComments=13
